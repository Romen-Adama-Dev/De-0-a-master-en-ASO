Comandos
Obtenga el porcentaje de ocupación de la partición de arranque (boot). El resultado
debe ser únicamente el porcentaje de ocupación siguiendo el formato de este ejemplo:
	df -h /boot | tail -1 | tr -s ' ' | cut -d ' ' -f5
	
Obtenga el número de usuarios activos en el sistema. El resultado debe ser
únicamente el número de usuarios activos siguiendo el formato de este ejemplo:
	who | wc -l | tr -d ' '

Obtenga la cantidad de memoria que queda libre en el sistema. El resultado debe ser
únicamente la cantidad de memoria libre siguiendo el formato de este ejemplo:
	free -h | grep Mem | tr -s ' ' | cut -d ' ' -f7

Muestre cuál de los directorios que están por debajo del directorio raíz ocupa menos
espacio en disco, así como el tamaño que ocupa. No deben considerarse por separado los
subdirectorios contenidos en esos directorios.
	find / -maxdepth 1 -mindepth 1 -type d -exec du -sh {} + 2>/dev/null | sort -h | head -n 1

Muestre cuál es el tanto por ciento de ocupación de la partición donde está montada
la raíz del sistema de ficheros.
	df -h / | tail -n 1 | tr -s ' ' | cut -d ' ' -f 5 | tr -d '%'

Determine cuánto tiempo lleva encendido el sistema. La salida de la orden debe ser
solamente el tiempo, por ejemplo "5 days".
	uptime -p | cut -d' ' -f2-

Scripts

Desarrolle un script en bash que genere cinco sistemas de ficheros ext4 con la
etiqueta “ALU1”, “ALU2”, etc. Dichos sistemas de ficheros estarán montados en las carpetas
“/mnt1”, “/mnt2”, etc. Si no existen las carpetas, se deberá crearlas.

#!/bin/bash

# Número de sistemas de ficheros a crear (parámetro)
N=$1

# Crear carpetas de montaje si no existen
for ((i=1; i<=$N; i++))
do
  mkdir -p "/mnt$i"
done

# Crear volúmenes físicos en los discos /dev/sdb y /dev/sdc
pvcreate /dev/sdb /dev/sdc

# Crear grupo de volúmenes VG_Examen con los volúmenes físicos
vgcreate VG_Examen /dev/sdb /dev/sdc

# Crear sistemas de ficheros ext4 con etiquetas ALU1, ALU2, ...
# Montar los sistemas de ficheros en /mnt1, /mnt2, ... y configurar para montaje automático
for ((i=1; i<=$N; i++))
do
  lvcreate -L 1G -n "VolLog$i" VG_Examen
  mkfs.ext4 -L "ALU$i" "/dev/VG_Examen/VolLog$i"
  mount "/dev/VG_Examen/VolLog$i" "/mnt$i"
  echo "/dev/VG_Examen/VolLog$i /mnt$i ext4 defaults 0 0" >> /etc/fstab
done

./crear_sistemas.sh 5


Desarrolle un script en bash que bloquee el acceso a aquellas cuentas de usuario que
cumplan con las siguientes condiciones:
No es la cuenta del usuario administrador.
La cuenta no tiene fecha de caducidad.
La palabra de paso de la cuenta no está bloqueada, es decir, su valor permite iniciar una sesión
autenticándose en el sistema.
No se ha iniciado una sesión con la cuenta en los últimos N días. Este valor N debe ser un número
entero mayor que cero que se pasará al script como parámetro de entrada.
Además, debe configurar el sistema para que el script se ejecute periódicamente todos los días a las
23:55, excepto los fines de semana.
Al finalizar el ejercicio, tendrá que subir el script generado y el contenido del “crontab” del sistema.

#!/bin/bash

# Parámetro N: Número de días sin inicio de sesión para bloquear la cuenta
N=$1

# Obtener la lista de usuarios que cumplen las condiciones
users_to_lock=$(awk -v n=$N -F: '{
  # Verificar que no sea la cuenta del usuario administrador
  if ($1 != "admin" && $1 != "root") {
    # Verificar que no haya fecha de caducidad y la contraseña no esté bloqueada
    if ($8 == "" && $2 != "*LK*") {
      # Obtener la última fecha de inicio de sesión y convertirla a timestamp
      last_login_date = $9
      if (last_login_date != "") {
        last_login_timestamp = mktime(substr(last_login_date,1,4) " " substr(last_login_date,5,2) " " substr(last_login_date,7,2) " 00 00 00")
        # Calcular la diferencia en días desde la última sesión
        days_since_last_login = (systime() - last_login_timestamp) / 86400
        # Imprimir el nombre del usuario si no ha iniciado sesión en los últimos N días
        if (days_since_last_login > n) {
          print $1
        }
      }
    }
  }
}' /etc/shadow)

# Bloquear el acceso a las cuentas de usuario obtenidas
for user in $users_to_lock
do
  passwd -l $user
done

./bloquear_cuentas.sh 30

55 23 * * 1-5 /ruta/del/script/bloquear_cuentas.sh 30



Suponga un sistema con dos discos duros como los descritos a continuación:
/dev/sda: con dos particiones.
/dev/sda1: partición que alberga el sistema de ficheros raíz.
/dev/sda2: partición tipo LVM que actualmente está libre (no se usa para nada).
/dev/sdb: con dos particiones.
/dev/sdb1: partición tipo LVM que actualmente está libre (no se usa para nada).
/dev/sdb2: partición tipo swap, usada como memoria de intercambio.
Describa las órdenes necesarias para:
1) Crear un grupo de volúmenes, etiquetado VG_ASO, formado por las particiones sda2 y sdb1.
	vgcreate VG_ASO /dev/sda2 /dev/sdb1

2) Crear un volumen lógico, etiquetado LV_ASO, que use todo el tamaño disponible.
	lvcreate -l 100%FREE -n LV_ASO VG_ASO

3) Crear un sistema de ficheros tipo ext4, etiquetado MEDIA, sobre el grupo de volúmenes.
	mkfs.ext4 -L MEDIA /dev/VG_ASO/LV_ASO

4) Montar el nuevo sistema de ficheros automáticamente en /var/media al arrancar el sistema.
	mkdir -p /var/media

	nano /etc/fstab
	echo "/dev/VG_ASO/LV_ASO /var/media ext4 defaults 0 0" >> /etc/fstab

Al finalizar el ejercicio, tendrá que subir un fichero de texto plano con la secuencia de acciones a
realizar para cumplir todas estas indicaciones.



Suponga que dispone de un sistema Linux con el sistema de cuotas funcionando y
que el espacio disponible para albergar los ficheros de sus usuarios se reduce a un único sistema de
ficheros montado en el directorio /home. Desarrolle un script en bash que establezca la siguiente
limitación a todos los usuarios con un UID mayor que 1000: los usuarios afectados no podrán poseer
más de una cierta cantidad de ficheros. La cantidad de ficheros máxima vendrá dada por el límite ya
impuesto a un cierto usuario, cuyo nombre se pasará como argumento al script.

#!/bin/bash

# Verificar si se proporcionó un usuario de referencia como argumento
if [ $# -eq 0 ]; then
    echo "Error: Debe proporcionar un usuario de referencia como argumento."
    exit 1
fi

# Obtener el límite de ficheros del usuario de referencia
reference_user=$1
file_limit=$(quota -u $reference_user | tail -n 1 | awk '{print $2}')

# Establecer el límite de ficheros para usuarios con UID > 1000
users=$(awk -F: '$3 > 1000 {print $1}' /etc/passwd)
for user in $users
do
    setquota -u $user $file_limit $file_limit 0 0 -a
done

echo "Límite de ficheros establecido para usuarios con UID > 1000 basado en $reference_user."

./establecer_limites.sh usuario_referencia

